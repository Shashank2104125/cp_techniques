Problem link:- https://leetcode.com/problems/shortest-distance-after-road-addition-queries-ii/description/

class Solution {
public:
    class ST {
    public:
        vector<int> st,lazy;
        int n;

        ST(int n) {
            this->n = n;
            st.resize(4*n,0);
            lazy.resize(4*n,-1);
            buildTree(0,0,n-1);
        }

        void update(int left, int right) {
            update(0,0,n-1,left,right);
        }

        int query() {
            return st[0];
        }

        void buildTree(int i, int lo, int hi) {
            if (lo==hi) {
                st[i]=1;
                if (lo==0) st[i]=0;
                return;
            }
            int mid = lo + (hi-lo)/2;
            buildTree(2*i+1,lo,mid); 
            buildTree(2*i+2,mid+1,hi);
            st[i] = st[2*i+1] + st[2*i+2];
        }

        void propagate(int i, int lo, int hi) {
            if(lazy[i]!=-1) {
                st[i] = 0;
                if (lo!=hi) {
                    lazy[2*i+1] = lazy[i];
                    lazy[2*i+2] = lazy[i];
                }
                lazy[i] = -1;
            }
        }

        void update(int i, int lo, int hi, int left, int right) {
            propagate(i,lo,hi);
            if (lo>right or hi<left) return; 
            if (lo>=left and hi<=right) { 
                st[i]=0;
                if (lo != hi) {
                    lazy[2*i+1] = 0;
                    lazy[2*i+2] = 0;
                }
                return;
            }
            int mid = lo+(hi-lo)/2;
            update(2*i+1,lo,mid,left,right);
            update(2*i+2,mid+1,hi,left,right);
            st[i] = st[2*i+1] + st[2*i+2];
        }
    };

    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {
        ST seg(n);
        vector<int> ans;
        for (auto& q : queries) {
            int u = q[0];
            int v = q[1];
            seg.update(u+1,v-1);
            ans.push_back(seg.query());
        }
        return ans;
    }
};
