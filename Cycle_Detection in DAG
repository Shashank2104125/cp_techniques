      //using dfs 
     
      bool cyclePresent(int u,vector<int> &vis,vector<int> &inR,vector<int> adj[]){
          vis[u]=1;
          inR[u]=1;
          for(auto v:adj[u]){
              //if not visited
              if(!vis[v] and cyclePresent(v,vis,inR,adj)) return true;
              //if visited
              else if(vis[v] and inR[v]) return true;
          }
          inR[u]=0;
          return false;
      }
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        vector<int> vis(V,0);
        vector<int> inR(V,0);
        for(int i=0;i<V;i++){
            if(!vis[i] and cyclePresent(i,vis,inR,adj)) return true;
        }
        return false;
    }

    
    //using bfs --> topological sort se
    
    bool isCyclic(int V, vector<int> adj[]) {
        vector<int> ind(V,0);
        queue<int> q;
        //step 1-fill the indegree
        for(int i=0;i<V;i++){
            for(auto v:adj[i]){
                ind[v]++;
            }
        }
        
        //step 2-chehck and push the element into the queue having indegrree 0
        int count=0;
        for(int i=0;i<V;i++){
            if(ind[i]==0){
                q.push(i);
                count++;
            }
        }
        
        //step 3- simple dfs
        
        while(!q.empty()){
            int u=q.front();
            q.pop();
            for(auto v:adj[u]){
              ind[v]--;
              if(ind[v]==0){
                  q.push(v);
                  count++;
              }
            }
        }
        if(count==V) return false;
        return true;
    }
