
//Given an array, print the Next Greater Element (NGE) for every element. 
#include <iostream>
#include <stack>
using namespace std;

// prints element and NGE pair for all elements of arr[] of
// size n
void printNGE(int arr[], int n)
{
    stack<int> s;

    // push the first element to stack
    s.push(arr[0]);

    // iterate for rest of the elements
    for (int i = 1; i < n; i++) {
        if (s.empty()) {
            s.push(arr[i]);
            continue;
        }
        while (!s.empty() && s.top() < arr[i]) {
            cout << s.top() << " --> " << arr[i] << endl;
            s.pop();
        }

        // push next to stack so that we can find next
        // greater for it
        s.push(arr[i]);
    }

    // After iterating over the loop, the remaining elements
    // in stack do not have the next greater element, so
    // print -1 for them
    while (!s.empty()) {
        cout << s.top() << " --> " << -1 << endl;
        s.pop();
    }
}

// Driver code
int main()
{
    int arr[] = { 11, 13, 21, 3 };
    int n = sizeof(arr) / sizeof(arr[0]);
    printNGE(arr, n);
    return 0;
}


// previous smaller element

vector<int> SmallerOnleft(int arr[], int n) {
    // Complete the function
    stack<int> st;
    st.push(n-1);
    vector<int> ans(n,-1);
    for(int i=n-2;i>=0;i--){
        
        if(st.empty()){
            st.push(i);
            continue;
        }
        while( !st.empty() && (arr[i] < arr[st.top()]) ){ //prefer condtion
            //cout<<arr[i]<<endl;
            ans[st.top()]=arr[i];
            st.pop();
        }
        st.push(i);
    }
    return ans;
}
